#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2011, Tomas Edwardsson <tommi@tommi.org>
#
# funcios is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# funcios is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Design goals
#   handle multiple disks with optional variant levels
#   handle checks for single hosts
#   can check multiple hosts, sends passive for results --multiple (TODO)
#   -w and -c set defaults, but thresholds can be defined per disk
#   -x exclude mountpoint
#   -X exclude filesystem type
#   -d mountpoint:warn:crit set specific threshold for specified mountpoint
#   -D mountpoint:warn:crit only check these mountpoints with specified warn/crit

# Example:
#    funcios-disks -H host -d /:10%:2% -d /boot:20:5 -w 100 -c 10

# / warn at 10% crit 2%
# /boot warn at 20MB crit at 5MB
# Everything else warn at 100MB crit at 10MB

fstypes_ignore = ['tmpfs', 'iso9660']
mountpoints_ignore = []

# Nagios plugin extensions (http://code.google.com/p/pynag/)
from pynag.Plugins import WARNING, CRITICAL, OK, UNKNOWN, simple as Plugin

# Func client (https://fedorahosted.org/func/)
import func.overlord.client as fc
import func.CommonErrors
import sys

def main():
	# Create the pynag.Plugin object
	np = Plugin(must_threshold=False)

	# Add command line arguments
	np.add_arg("d", "disk-spec", "Path to device/mountpoint to monitor, including warn and critial, eg /:90%:95%", required=None, action="append")
	np.add_arg("D", "disk-spec-exclusive", "Path to device/mountpoint to monitor, including warn and critial, eg /:90%:95%, no other disks than specified will be checked", required=None, action="append")
	np.add_arg("x", "exclude-mountpoint", "Exclude a specific mountpoint", required=None, action="append")
	np.add_arg("X", "exclude-fstype", "Exclude a specific filesystem type", required=None, action="append")
	np.add_arg("l", "list-minions", "Exclude a specific filesystem type", required=None, action="store_true")

	# Plugin activation
	np.activate()

	# Set defaults for parameters
	crit = np['critical'] or '0'
	warn = np['warning'] or '0'
	disk_spec = np['disk-spec'] or []
	disk_spec_exclusive = np['disk-spec-exclusive'] or []
	exclude_fstype = np['exclude-fstype'] or []
	exclude_mountpoint = np['exclude-mountpoint'] or []
	list_minions = np['list-minions'] or ""

	# We got some mountpoint exclusions
	for mountpoint in exclude_mountpoint:
		mountpoints_ignore.append(mountpoint)

	# We got some filesystem exclusions, add them to the list
	for fstype in exclude_fstype:
		fstypes_ignore.append(fstype)

	# Both disk_spec and disk_spec_exclusive cannot live together
	if len(disk_spec) and len(disk_spec_exclusive):
		np.nagios_exit(UNKNOWN, "Cannot join -d/--disk-spec and -D/--disk-spec-exclusive arguments")

	# Create parsed_disk_spec arguments
	parsed_disk_spec = []
	for diskspec in disk_spec:
		try:
			ds = parse_diskspec(diskspec)
		except Exception, err:
			np.nagios_exit(UNKNOWN, err)
		parsed_disk_spec.append(ds)

	# Create parsed_disk_spec_exclusive arguments
	parsed_disk_spec_exclusive = []
	for diskspec in disk_spec_exclusive:
		try:
			ds = parse_diskspec(diskspec)
		except Exception, err:
			np.nagios_exit(UNKNOWN, err)
		parsed_disk_spec_exclusive.append(ds)

	# Default we use blocks
	threshold_type = 'kb'

	if crit[-1] == '%':
		threshold_type = 'percentage'

	if warn[-1] == '%' and threshold_type != 'percentage':
		np.nagios_exit(UNKNOWN, "Cannot mix percentage and KB for warning and critical")

	# No hostname specified, we default to all
	host = np['host'] or '*'

	if list_minions == True:
		print "List of minions"
		for minion in fc.Client(host).list_minions():
			print "	%s" % (minion)
		sys.exit(0)

	# Try to setup func client object
	try:
		client = fc.Client(host)
	except func.CommonErrors.Func_Client_Exception, err:
		np.nagios_exit(UNKNOWN, err)

	# Run disk usage
	try:
		du = client.disk.usage()
	except:
		np.nagios_exit(UNKNOWN, "Unable to run funcios agent on client")

	# TODO support multiple hosts
	if len(du.keys()) > 1:
		np.nagios_exit(UNKNOWN, "Multiple hosts not supported yet!")

	# Roll through the result dict
	for hostn in du:
		# Mountpoints
		for mp in du[hostn]:
			# Ignore certain filesystem types
			if du[hostn][mp]['fstype'] in fstypes_ignore:
				continue

			# Ignore mountpoints
			if mp in mountpoints_ignore:
				continue

			# Set thresholds
			mp_warn = warn
			mp_crit = crit
			mp_threshold_type = threshold_type

			# disk_spec_exclusive set, check if current mp is defined
			if len(parsed_disk_spec_exclusive):
				found = 0
				for dse in parsed_disk_spec_exclusive:
					if dse['mountpoint'] == mp:
						found = 1
						mp_warn = dse['warn']
						mp_crit = dse['crit']
						mp_threshold_type = dse['type']
						break
				if not found: continue

			# disk_spec_exclusive set, search for thresholds
			if len(parsed_disk_spec):
				for dse in parsed_disk_spec:
					if dse['mountpoint'] == mp:
						found = 1
						mp_warn = dse['warn']
						mp_crit = dse['crit']
						mp_threshold_type = dse['type']
						break


			# Get the human readable strings for disk sizes
			hr_used = human_readable_size(float(du[hostn][mp]['used']))
			hr_free = human_readable_size(float(du[hostn][mp]['total']) - float(du[hostn][mp]['used']))

			if mp_threshold_type == 'percentage':
				np.add_perfdata("%s percentage" % mp, du[hostn][mp]['percentage'], '%', mp_warn.replace('%', ''), mp_crit.replace('%', ''), '0', '100')
				np.add_perfdata("%s blocks" % mp, du[hostn][mp]['used'], 'K', 0, 0, '0', du[hostn][mp]['total'])

				# Thresholds
				if du[hostn][mp]['percentage'] > int(mp_crit.replace('%', '')):
					np.add_message(CRITICAL, "%s Critical, Used %s/%s%%, Free %s/%s%%" % (
						mp, 
						hr_used, 
						du[hostn][mp]['percentage'], 
						hr_free, 
						(100 - du[hostn][mp]['percentage'])))
					continue
				elif du[hostn][mp]['percentage'] > int(mp_warn.replace('%', '')):
					np.add_message(WARNING, "%s Warning, Used %s/%s%%, Free %s/%s%%" % (
						mp,
						hr_used,
						du[hostn][mp]['percentage'],
						hr_free, 
						(100 - du[hostn][mp]['percentage'])))
					continue
			else:
				np.add_perfdata("%s percentage" % mp, du[hostn][mp]['percentage'], '%', 0, 0, '0', '100')
				np.add_perfdata("%s blocks" % mp, du[hostn][mp]['used'], 'K', mp_warn, mp_crit, '0', du[hostn][mp]['total'])

				mp_crit = int(mp_crit) * 1024
				mp_warn = int(mp_warn) * 1024

				# Thresholds
				if int(du[hostn][mp]['available']) < mp_crit:
					np.add_message(CRITICAL, "%s Critical, Used %s/%s%%, Free %s/%s%%" % (
						mp, 
						hr_used, 
						du[hostn][mp]['percentage'], 
						hr_free, 
						(100 - du[hostn][mp]['percentage'])))
					continue
				elif int(du[hostn][mp]['available']) < mp_warn:
					np.add_message(WARNING, "%s Warning, Used %s/%s%%, Free %s/%s%%" % (
						mp,
						hr_used,
						du[hostn][mp]['percentage'],
						hr_free, 
						(100 - du[hostn][mp]['percentage'])))
					continue

			np.add_message(OK, "%s Used %s/%s%%, Free %s/%s%%" % (mp, hr_used, du[hostn][mp]['percentage'], hr_free, (100 - du[hostn][mp]['percentage'])))

	(code, message) = np.check_messages(joinallstr = "\n")

	# Check if any messages were processed
	if message == "":
		np.nagios_exit(UNKNOWN, "No filesystems found using parameters given")

	# Exit with the relevant code
	np.nagios_exit( code, message )

def human_readable_size (size = -1):
	"""
	Converts bytes to human readable sizes, eg MB, GB, TB.
	"""
	sizes = ['KB', 'MB', 'GB', 'TB', 'PB']

	for i in range(len(sizes)):
		if size < 1024**(i+1):
			break
	return "%.2f%s" % ((size / 1024**(i)), sizes[i])


def parse_diskspec(diskspec):
	(mp, mp_warn, mp_crit) = diskspec.split(':')
	"""
	Parses command line arguemnts for disks, eg "/:90%:95%"
	"""

	if mp_warn[-1] == '%':
		type = 'percentage'
		mp_warn = mp_warn[:-1]
	else:
		type = 'kb'
	if mp_crit[-1] == '%':
		if type == 'kb':
			raise Exception("Argument problem, percentage and kilobytes not allowed together, -d %s" % (diskspec))
		mp_crit = mp_crit[:-1]
	elif type == 'percentage':
		raise Exception("Argument problem, percentage and kilobytes not allowed together, -d %s" % (diskspec))

	if mp_warn.isdigit() == False:
		raise Exception("Argument warning not numeric, %s in -d %s" % (mp_warn, diskspec))
	if mp_crit.isdigit() == False:
		raise Exception("Argument critical not numeric, %s in -d %s" % (mp_crit, diskspec))

	ds = { 'mountpoint': mp, 'warn': mp_warn, 'crit': mp_crit, 'type': type }
	return ds
	

if __name__ == '__main__':
    main()


# vi: ts=4 :
